plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

def localProps = new Properties()
def localPropsFile = rootProject.file("local.properties")
if (localPropsFile.exists()) {
    localProps.load(new FileInputStream(localPropsFile))
}

android {
    namespace 'org.reedstrom.letetris'
    compileSdk = 34

    defaultConfig {
        applicationId "org.reedstrom.letetris"
        minSdk = 21                     // Target Android 5.0+ devices
        targetSdk = 34
        versionCode = 1
        versionName = "1.0.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    // Required if you're using coreLibraryDesugaring
    buildFeatures {
        buildConfig = true

    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main.jniLibs.srcDirs = ['libs']
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }
    signingConfigs {
      release {
        storeFile rootProject.file(localProps['storeFile'])
        storePassword localProps['storePassword']
        keyAlias localProps['keyAlias']
        keyPassword localProps['keyPassword']
      }
    }

  buildTypes {
    release {
      signingConfig signingConfigs.release
      minifyEnabled false
      shrinkResources false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':android:assembleRelease')) {
        def gitTag = 'git describe --tags --exact-match'.execute([], rootDir).text.trim()
        def isClean = 'git status --porcelain'.execute([], rootDir).text.trim().isEmpty()

        if (!gitTag) {
            throw new GradleException("❌ Refusing to build release: HEAD is not at a Git tag.")
        }

        if (!isClean) {
            throw new GradleException("❌ Refusing to build release: working directory is dirty.")
        }

        println "✅ Release build from tag '${gitTag}' with clean working directory."
    }
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == "release") {
        variant.outputs.all { output ->
            // Get version info from Git
            def gitTag = 'git describe --tags --abbrev=0'.execute([], rootDir).text.trim()
            def gitHash = 'git rev-parse --short HEAD'.execute([], rootDir).text.trim()

            def appName = "letetris"
            def versionTag = gitTag ?: variant.versionName
            def versionCode = variant.versionCode

            def newApkName = "${appName}-${versionTag}+g${gitHash}-${variant.buildType.name}.apk"
            outputFileName = newApkName
        }
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
    doFirst {
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
    packageTask.dependsOn 'copyAndroidNatives'
}

configurations { natives }

dependencies {
        implementation project(":core")
        implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
        implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        implementation "com.badlogicgames.gdx-controllers:gdx-controllers-android:$gdxControllersVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"

    // Enable Java 8–11 APIs on Android 5+
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
}
